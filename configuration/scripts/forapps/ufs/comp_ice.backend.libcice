#! /bin/csh -f

### Expect to find the following environment variables set on entry:
# MACHINE_ID
# SYSTEM_USERDIR
# SRCDIR
# EXEDIR

### local variable that begin with ICE_ are needed in the Macros file
# ICE_COMMDIR
# ICE_BLDDEBUG
# ICE_THREADED
# ICE_CPPDEFS

setenv OBJDIR $EXEDIR/compile           ; if !(-d $OBJDIR) mkdir -p $OBJDIR

setenv THRD     no        # set to yes for OpenMP threading

if (${MACHINE_ID} =~ cheyenne*) then
  setenv ARCH cheyenne_intel
else if (${MACHINE_ID} =~ orion*) then
  setenv ARCH orion_intel
else if (${MACHINE_ID} =~ hera*) then
  setenv ARCH hera_intel
else if (${MACHINE_ID} =~ wcoss*) then
  setenv ARCH wcoss_dell_p3_intel
else if (${MACHINE_ID} =~ stampede*) then
  setenv ARCH stampede_intel
else
  echo "CICE6 ${0}: ERROR in ARCH setup, ${hname}"
  exit -2
endif

echo "CICE6 ${0}: ARCH = $ARCH"

cd $OBJDIR

setenv SHRDIR csm_share     # location of CCSM shared code
setenv DRVDIR nuopc/cmeps

#if ($NTASK == 1) then
#   setenv ICE_COMMDIR serial
#else
   setenv ICE_COMMDIR mpi 
#endif

if ($THRD == 'yes') then
  setenv ICE_THREADED true
else
  setenv ICE_THREADED false
endif

if ($?ICE_CPPDEFS) then
  setenv ICE_CPPDEFS "${ICE_CPPDEFS} -Dcoupled"
else
  setenv ICE_CPPDEFS "-Dcoupled"
endif

if !($?IO_TYPE) then
  setenv IO_TYPE  netcdf4   # set to none if netcdf library is unavailable
endif
if ($IO_TYPE == 'netcdf3' || $IO_TYPE == 'netcdf4') then
  setenv IODIR io_netcdf
  setenv ICE_CPPDEFS "${ICE_CPPDEFS} -DUSE_NETCDF"
else if ($IO_TYPE == 'pio') then
  setenv IODIR io_pio
  setenv ICE_CPPDEFS "${ICE_CPPDEFS} -DUSE_NETCDF"
else
  setenv IODIR io_binary
endif

# Build in debug mode. If DEBUG=Y, enable DEBUG compilation. This
# flag is set in ${ROOTDIR}/coupledFV3_MOM6_CICE_debug.appBuilder file.
if (! $?DEBUG) then
  setenv ICE_BLDDEBUG false
else
  if ($DEBUG == "Y") then
    setenv ICE_BLDDEBUG true
  else
    setenv ICE_BLDDEBUG false
  endif
endif
echo "CICE6 ${0}: DEBUG = ${ICE_BLDDEBUG}"

### List of source code directories (in order of importance).
cat >! Filepath << EOF
${SRCDIR}/cicecore/drivers/${DRVDIR}
${SRCDIR}/cicecore/cicedynB/dynamics
${SRCDIR}/cicecore/cicedynB/general
${SRCDIR}/cicecore/cicedynB/analysis
${SRCDIR}/cicecore/cicedynB/infrastructure
${SRCDIR}/cicecore/cicedynB/infrastructure/io/${IODIR}
${SRCDIR}/cicecore/cicedynB/infrastructure/comm/${ICE_COMMDIR}
${SRCDIR}/cicecore/shared
${SRCDIR}/icepack/columnphysics
${SRCDIR}/$SHRDIR
EOF

setenv MAKENAME   gmake
setenv MAKETHRDS  1
setenv MAKEFILE   ${SRCDIR}/configuration/scripts/Makefile
setenv MACROSFILE ${SRCDIR}/configuration/scripts/machines/Macros.$ARCH
setenv DEPFILE    ${SRCDIR}/configuration/scripts/makdep.c

echo "CICE6 ${0}: EXEDIR     = ${EXEDIR}"
echo "CICE6 ${0}: OBJDIR     = ${OBJDIR}"
echo "CICE6 ${0}: MAKEFILE   = ${MAKEFILE}"
echo "CICE6 ${0}: MACROSFILE = ${MACROSFILE}"
echo "CICE6 ${0}: DEPFILE    = ${DEPFILE}"
echo "CICE6 ${0}: ESMFMKFILE = ${ESMFMKFILE}"

#diagnostics
#${MAKENAME} -j ${MAKETHRDS} VPFILE=Filepath EXEC=${OBJDIR}/cice \
#  -f  ${MAKEFILE} MACFILE=${MACROSFILE} DEPFILE=${DEPFILE} db_files
#${MAKENAME} -j ${MAKETHRDS} VPFILE=Filepath EXEC=${OBJDIR}/cice \
#  -f  ${MAKEFILE} MACFILE=${MACROSFILE} DEPFILE=${DEPFILE} db_flags

#clean
#${MAKENAME} VPFILE=Filepath EXEC=${OBJDIR}/cice \
#  -f  ${MAKEFILE} MACFILE=${MACROSFILE} DEPFILE=${DEPFILE} clean

#needed to trigger a failed build to rest of system
rm ${BINDIR}/cice6.mk

#build lib (includes dependencies)
${MAKENAME} -j ${MAKETHRDS} VPFILE=Filepath EXEC=${OBJDIR}/libcice6.a \
  -f  ${MAKEFILE} MACFILE=${MACROSFILE} DEPFILE=${DEPFILE} libcice

if ($status != 0) then
  echo "CICE6 ${0}: gmake failed, exiting"
  exit -2
endif

#install
mkdir -p ${BINDIR}
cp -f ${OBJDIR}/libcice6.a ${BINDIR}/
cp -f ${OBJDIR}/ice_comp_nuopc.mod ${BINDIR}/
cp -f ${OBJDIR}/ice_timers.mod ${BINDIR}/

cat >! ${BINDIR}/cice6.mk << EOF
# ESMF self-describing build dependency makefile fragment

ESMF_DEP_FRONT     = ice_comp_nuopc
ESMF_DEP_INCPATH   = ${BINDIR}
ESMF_DEP_CMPL_OBJS = 
ESMF_DEP_LINK_OBJS = ${BINDIR}/libcice6.a
  
EOF

